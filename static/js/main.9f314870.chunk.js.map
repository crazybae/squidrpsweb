{"version":3,"sources":["instruction.js","App.js","serviceWorker.js","index.js"],"names":["ShowInstruction","useState","show","setShow","Alert","variant","onClose","dismissible","Heading","Button","onClick","masterAddress","availableNetworks","rock","paper","scissors","contractInfo","ABI","getElem","elemId","document","getElementById","RPS","c1","c2","getRandomInt","min","max","Math","ceil","floor","random","App","state","loaded","chainId","myAccount","mastersCards","yourCards","componentDidMount","a","window","ethereum","provider","ethers","providers","Web3Provider","startApp","watchChainAccount","getNetwork","networkId","includes","listAccounts","length","connectWallet","signer","getSigner","getAddress","account","instance","Contract","MainCardAddress","balanceOf","toNumber","alert","setState","console","log","error","request","method","accounts","on","parseInt","Network","connectInfo","getMastersChoices","innerHTML","getRandomCards","cards","htmlStr","forEach","card","tokenID","image","rps","getYourRandomChoices","letsRPS","roundPlayer1","roundPlayer2","resStr","round","player1","player2","outcome","i","winner","address","numOfCards","balance","tokenOfOwnerByIndex","getConsonantsIndex","getGenes","g1","TempRPScard1","Array","from","push","RPScard1","map","x","rem","tokenURI","tokenInfoBase64","jsonInfo","JSON","parse","atob","substring","this","className","width","id","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f314870.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nfunction ShowInstruction() {\n  const [show, setShow] = useState(false);\n\n  if (show) {\n    return (\n      <Alert variant=\"primary\" onClose={() => setShow(false)} dismissible>\n        <Alert.Heading>\n          Manual\n        </Alert.Heading>\n        <ul>\n          <li>Get master's three cards randomly</li>\n          <li>Get your three cards randomly</li>\n          <li>Each card automatically generates five items among rock, paper, scissors by the rules below</li>\n          <li>Five rock-paper-scissors game determines a round winner</li>\n          <li>A final winner will be determined through three rounds</li>\n        </ul>\n        <Alert.Heading>\n          Rules\n        </Alert.Heading>\n        <ul>\n          <li>ㄱ:0 ㄴ:1 ㄷ:2 ㄹ:3 ㅁ:4 ㅂ:5 ㅅ:6 ㅇ:7 ㅈ:8 ㅊ:9 ㅋ:10 ㅌ:11 ㅍ:12 ㅎ:13 Triangle:14 --(mod 3)--&gt; 0:rock, 1:paper, 2:scissors</li>\n          <li>The first four genes and last four genes are assumed as two four-digit integers and are converted samely. E.g., 1234 0203 --(mod 3)--&gt; 1:paper 2:scissors</li>\n        </ul>\n      </Alert>\n    );\n  }\n  return (\n    <Button variant=\"info\" onClick={() => setShow(true)}>\n      Instruction\n    </Button>\n  );\n}\n\nexport default ShowInstruction;\n","import React, { Component, useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport { ethers } from \"ethers\";\nimport ShowInstruction from \"./instruction\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nconst masterAddress = '0x9194C01db602Ed716E9d16Fa60F684DeB3b62523';\nconst numberOfRounds = 3;\nconst availableNetworks = [1]; // mainnet only\n\nconst [rock, paper, scissors] = ['\\u270A', '\\u270B', '\\u270C'];\nconst contractInfo = {\n  1:{\n    \"Network\": \"Ethereum Mainnet\",\n    \"MainCardAddress\": '0xBE5C953DD0ddB0Ce033a98f36C981F1B74d3B33f',\n  },\n};\nconst ABI = [\n  \"function ownerOf(uint256 tokenId) external view returns (address)\",\n  \"function balanceOf(address owner) external view returns (uint256)\",\n  \"function getGenes(uint256 _tokenId) public view returns (uint8[8])\",\n  \"function getConsonants(uint256 _tokenId) public view returns (string[3])\",\n  \"function getConsonantsIndex(uint256 _tokenId) public view returns (uint8[3])\",\n  \"function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256)\",\n  \"function tokenURI(uint256 _tokenId) public view returns (string)\",\n];\n\nfunction getElem(elemId) {\n  return document.getElementById(elemId);\n}\n\n// return -1 when c1 wins, 0 in draw, 1 when c2 wins \nconst RPS = (c1, c2) => {\n  if (c1 === c2) {\n      return 0;\n  }\n  if (c1 === rock) {\n      if (c2 === paper) {\n          return 1;\n      } else {\n          return -1;\n      }\n  }\n  if (c1 === paper) {\n      if (c2 === scissors) {\n          return 1;\n      } else {\n          return -1;\n      }\n  }\n  if (c1 === scissors) {\n      if (c2 === rock) {\n          return 1;\n      } else {\n          return -1;\n      }\n  }\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    chainId: 0,\n    myAccount: \"\",\n    mastersCards: [],\n    yourCards: [],\n  };\n\n  componentDidMount = async () => {\n\n    if (typeof window.ethereum === 'undefined') {\n      return <div>You need an ethereum wallet extention to play this game ...</div>;\n    }\n    this.provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    await this.startApp();\n    await this.watchChainAccount();\n  };\n\n  startApp = async () => {\n    try {\n\n      this.networkId = (await this.provider.getNetwork()).chainId;\n      if ( !availableNetworks.includes(this.networkId) ) {\n        return <div>Change your wallet network into Mainnet or Rinkeby/Goerli testnet and press F5 ...</div>;\n      }\n\n      let accts = await this.provider.listAccounts();\n      // console.log(accts); \n      if (accts.length <= 0) {\n        await this.connectWallet();\n      }\n\n      this.signer = this.provider.getSigner();\n      this.account = await this.signer.getAddress();\n\n      this.instance = new ethers.Contract(contractInfo[this.networkId].MainCardAddress, ABI, this.provider);\n      if ((await this.instance.balanceOf(this.account)).toNumber() === 0) {\n        alert(`Your account ${this.account} has no Squid Game cards. Please use another address having cards`);\n        return;\n      }\n\n\n      this.setState({\n        chainId: this.networkId,\n        loaded: true,\n        myAccount: this.account,\n      });\n\n    } catch (error) {\n      console.log(error);\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  connectWallet = async () => {\n    this.accounts = await window.ethereum\n        .request({method: 'eth_requestAccounts'});\n  }\n\n  watchChainAccount = async () => {\n    this.provider.on(\"accountsChanged\", (accounts) => {\n      alert(\"Account changed\");\n      this.startApp();\n    });\n    this.provider.on(\"chainChanged\", (chainId) => {\n      this.startApp();\n      alert(\"Network changed to \" + contractInfo[parseInt(chainId)].Network);\n    });\n    this.provider.on(\"connect\", (connectInfo) => {\n      alert(\"Connected to Ethereum network\");\n    });      \n    this.provider.on(\"disconnect\", (error) => {\n      alert(\"Disconnected from Ethereum network\");\n    });      \n  }\n\n  getMastersChoices = async() => {\n\n    getElem(\"mastersChoices\").innerHTML = \"waiting ...\";\n\n    let cards = await this.getRandomCards(masterAddress, numberOfRounds);\n\n    var htmlStr = `<table class=\"center\" border=\"1\">`\n    cards.forEach((card) => {\n      htmlStr += `<tr><td>Token ID #${card.tokenID}</td><td><img src='${card.image}' height=\"100\" /></td><td>${card.rps}</td></tr>`\n    });\n    htmlStr += `</table>`\n\n    getElem(\"mastersChoices\").innerHTML = htmlStr;\n\n    this.setState({\n      chainId: this.networkId,\n      loaded: true,\n      myAccount: this.account,\n      mastersCards: cards,\n    });\n  }\n\n  getYourRandomChoices = async() => {\n\n    if (this.state.mastersCards.length === 0) {\n      alert(\"Press 'Get Master's Choices' first\");\n      return\n    }\n\n    getElem(\"yourRandomChoices\").innerHTML = \"waiting ...\";\n\n    let cards = await this.getRandomCards(this.signer.getAddress(), numberOfRounds);\n\n    var htmlStr = `<table class=\"center\" border=\"1\">`\n    cards.forEach((card) => {\n      htmlStr += `<tr><td>Token ID #${card.tokenID}</td><td><img src='${card.image}' height=\"100\" /></td><td>${card.rps}</td></tr>`\n    });\n    htmlStr += `</table>`\n\n    getElem(\"yourRandomChoices\").innerHTML = htmlStr;\n\n    this.setState({\n      chainId: this.networkId,\n      loaded: true,\n      myAccount: this.account,\n      yourCards: cards,\n    });\n  }\n\n  letsRPS = async() => {\n\n    if (this.state.yourCards.length === 0) {\n      alert(\"Press 'Get Your Random Choices' first\");\n      return\n    }\n\n    getElem(\"rpsResults\").innerHTML = \"waiting ...\";\n\n    let roundPlayer1 = 0;\n    let roundPlayer2 = 0;\n\n    let resStr = \"\";\n    for (let round = 0; round < numberOfRounds; round++) {\n\n      let player1 = 0;  // you\n      let player2 = 0;  // master\n      let outcome = 0;\n\n      resStr += `<p><b>Round ${round+1}</b></p>`\n  \n      for (let i = 0; i < 5; i++) {\n        outcome = RPS(this.state.yourCards[round].rps[i], this.state.mastersCards[round].rps[i]);\n        //temporal\n        let winner; \n        if (outcome === -1) {\n            winner = 'You win';\n            player1++;\n        } else if (outcome === 1) {\n            winner = 'Squid Master wins'\n            player2++;\n        } else {\n            winner = 'Draw'\n        }\n        resStr += `<p>  RPS ${i+1}:  ${this.state.yourCards[round].rps[i]} vs ${this.state.mastersCards[round].rps[i]} --> ${winner}</p>`\n      }\n      resStr += `<p>  You : Squid Master = ${player1} : ${player2}</p><p></p>`\n\n      if (player1 > player2) {\n        roundPlayer1++;\n      } else if (player1 < player2) {\n        roundPlayer2++;\n      }\n    }\n    getElem(\"rpsResults\").innerHTML = resStr;\n\n    if (roundPlayer1 > roundPlayer2) {  // you win\n      getElem(\"finalResult\").innerHTML = `<center><font size='20px'><b>You win!</b></font><br><br><img src='./images/youwin.jpg' height=\"400\" /></center>`;\n    } else if (roundPlayer1 < roundPlayer2) { // master wins\n      getElem(\"finalResult\").innerHTML = `<center><font size='20px'><b>Master wins!</b></font><br><br><img src='./images/masterwins.jpg' height=\"400\" /></center>`;\n    } else {  // draw\n      getElem(\"finalResult\").innerHTML = `<center><font size='20px'><b>Draw</b></font><br><br><img src='./images/draw.png' height=\"400\" /></center>`;\n    }\n  }\n\n  getRandomCards = async (address, numOfCards) => {\n\n    const balance = await this.instance.balanceOf(address);\n    let cards = [];\n  \n    for (let i = 0; i < numOfCards; i++) {\n      let tokenID = await this.instance.tokenOfOwnerByIndex(address, getRandomInt(0, balance));\n      let c1 = await this.instance.getConsonantsIndex(tokenID);\n      let g1 = await this.instance.getGenes(tokenID);\n      let TempRPScard1 = Array.from(c1);\n      TempRPScard1.push(g1[0]*1000 + g1[1]*100 + g1[2]*10 + g1[3]);\n      TempRPScard1.push(g1[4]*1000 + g1[5]*100 + g1[6]*10 + g1[7]);\n      let RPScard1 = TempRPScard1.map((x) => {\n          let rem = x % 3;\n          if (rem === 0) {\n              return rock;\n          } else if (rem === 1) {\n              return paper;\n          }\n          return scissors;\n      });\n      let tokenInfoBase64 = await this.instance.tokenURI(tokenID);\n      let jsonInfo = JSON.parse(atob(tokenInfoBase64.substring(29)));\n\n      cards.push({ tokenID: tokenID.toNumber(), image: jsonInfo.image, rps: RPScard1 });\n    }\n\n    return cards;\n  }\n\n  render() {\n\n    if (!this.state.loaded) {\n      return <div>Change your wallet network into Mainnet or Rinkeby/Goerli testnet and press F5 ...</div>;\n    }\n    return (\n\n      <div className=\"App\">\n\n          <h1>Defeat Squid Master! Rock-Paper-Scissors Game</h1>\n          <ShowInstruction />\n          <hr />\n\n          <p>Current network is <b>{ contractInfo[this.state.chainId].Network }</b> having chain ID, {this.state.chainId}</p>\n          <p>'Squid Game Card' contract address is <b>{ contractInfo[this.state.chainId].MainCardAddress }</b></p>\n          <p>Your address is <b>{ this.state.myAccount }</b></p>\n\n          <table>\n            <tr>\n              <td width='400'><Button id='mastersChoicesBtn' onClick={this.getMastersChoices} >\n                Get Master's Choices</Button></td>\n              <td width='400'><Button id='yourChoicesBtn' onClick={this.getYourRandomChoices} >\n                Get Your Random Choices</Button></td>\n            </tr><tr>\n              <td><div id=\"mastersChoices\"></div></td>\n              <td><div id=\"yourRandomChoices\"></div></td>\n            </tr>\n          </table>\n\n          <p></p>\n          <table>\n            <tr>\n              <td width='400'><Button id='letsRPSBtn' onClick={this.letsRPS} >{ `${rock} ${paper} ${scissors}` }</Button></td>\n              <td width='400'></td>\n            </tr><tr>\n              <td><div id=\"rpsResults\"></div></td>\n              <td><div id=\"finalResult\"></div></td>\n            </tr>\n          </table>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}